{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\administracion proyect\\\\client\\\\client\\\\src\\\\components\\\\Posts\\\\GetPosts\\\\GetPostsUser.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { refreshProfileUser } from \"../../../redux/actions\";\nimport { useEffect, useState } from \"react\";\nimport \"./Posts.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GetPostsUser = () => {\n  _s();\n  const {\n    userId\n  } = useParams(); // Obtiene el userId de los parámetros de la URL\n  const navigate = useNavigate(); // Hook para la navegación\n  const dispatch = useDispatch(); // Hook para despachar acciones a Redux\n  const user = useSelector(state => state.profileUser); // Obtiene los datos del perfil de usuario del estado global\n  const [posts, setPosts] = useState([]); // Estado para almacenar los posts del usuario\n  const [userDataFetched, setUserDataFetched] = useState(false); // Estado para verificar si los datos del usuario se han obtenido\n\n  // Función para obtener todos los posts de usuarios\n  const allPostsAdmin = async () => {\n    const allPosts = await axios.get(\"http://localhost:3001/postUser\"); // Solicitud para obtener todos los posts\n    setPosts(allPosts.data); // Actualiza el estado con los posts obtenidos\n  };\n\n  // Función para refrescar el perfil del usuario\n  const refreshProfile = async () => {\n    try {\n      await dispatch(refreshProfileUser(userId)); // Despacha la acción para refrescar el perfil\n    } catch (error) {\n      console.error(\"Error al recargar el perfil:\", error);\n    }\n  };\n\n  // Función para obtener los datos del usuario relacionado con un post específico\n  const getUserData = async postId => {\n    try {\n      const response = await axios.get(`http://localhost:3001/postUser/relationUser/${postId}` // Solicitud para obtener el usuario relacionado con el post\n      );\n      return response.data.User; // Devuelve los datos del usuario\n    } catch (error) {\n      console.error(`Error al obtener ${postId}:`, error.response.data);\n      throw error;\n    }\n  };\n\n  // Función para obtener los datos del usuario para cada post\n  const fetchUserDataForPosts = async () => {\n    const userPromises = posts.map(async post => {\n      // Mapea cada post para obtener el usuario relacionado\n      if (post.id) {\n        const user = await getUserData(post.id); // Obtiene los datos del usuario para el post\n        return {\n          ...post,\n          user\n        }; // Devuelve el post con los datos del usuario\n      }\n      return post; // Devuelve el post si no tiene id\n    });\n    const postsWithUsers = await Promise.all(userPromises); // Espera a que todas las promesas se resuelvan\n    setPosts(postsWithUsers); // Actualiza el estado con los posts que incluyen los datos del usuario\n  };\n  useEffect(() => {\n    refreshProfile(); // Llama a la función para refrescar el perfil al montar el componente\n    allPostsAdmin(); // Llama a la función para obtener todos los posts\n  }, [userId]);\n  useEffect(() => {\n    const fetchUserDataIfNeeded = async () => {\n      // Verifica si los datos del usuario no se han obtenido y si hay posts\n      if (!userDataFetched && posts.length > 0) {\n        await fetchUserDataForPosts(); // Llama a la función para obtener los datos del usuario para los posts\n        setUserDataFetched(true); // Marca los datos como obtenidos\n      }\n    };\n    fetchUserDataIfNeeded(); // Llama a la función para obtener los datos si es necesario\n  }, [posts, userDataFetched]);\n\n  // Maneja el clic para editar un comentario\n  const editCommentHandler = async postId => {\n    navigate(`/editPosts/${userId}/${postId}`); // Redirige a la página de edición del post\n    await refreshProfile(); // Refresca el perfil del usuario\n  };\n\n  // Maneja el clic para crear un nuevo post\n  const onClickNewPostHandler = async () => {\n    navigate(`/createPost/${userId}`); // Redirige a la página para crear un nuevo post\n    await refreshProfile(); // Refresca el perfil del usuario\n  };\n\n  // Maneja el clic para eliminar un post\n  const onclickDeleteHandler = async id => {\n    const confirmDelete = window.confirm(\"¿Estás seguro de que deseas eliminar este post?\");\n    if (confirmDelete) {\n      try {\n        await axios.delete(`http://localhost:3001/postUser/deletePost/${id}`); // Solicitud para eliminar el post\n        alert(\"Posteo eliminado correctamente\"); // Notificación de eliminación exitosa\n\n        // Actualiza el estado local para eliminar el post eliminado\n        setPosts(prevPosts => prevPosts.filter(post => post.id !== id)); // Filtra el post eliminado\n      } catch (error) {\n        alert(\"Error al eliminar el post: \" + error.message);\n      }\n    }\n  };\n\n  // Maneja el clic para volver a la página de perfil de usuario\n  const onClickBackHandler = () => {\n    navigate(\"/userProfile\"); // Redirige a la página de perfil de usuario\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Posts User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"allPotsUser\",\n      children: user.admin === true ?\n      // Verifica si el usuario es un administrador\n      posts.length > 0 ?\n      // Verifica si hay posts disponibles\n      posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itemPostUser\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: post.user &&\n          /*#__PURE__*/\n          // Verifica si hay datos del usuario relacionados con el post\n          _jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dataUserPost\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"User: \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 27\n                }, this), post.user.name, \" \", post.user.lastName, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: post.user.image,\n                alt: \"User\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 25\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Comment: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 25\n              }, this), post.comment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"itemPostUserButton\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => editCommentHandler(post.id),\n            children: \"Edit Comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => onclickDeleteHandler(post.id) // Botón para eliminar el post\n            ,\n            className: \"deletePost\",\n            children: \"Delete Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 17\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No hay posts disponibles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this) : user.Posts && user.Posts.length > 0 ?\n      // Verifica si el usuario tiene posts\n      user.Posts.map(us => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itemPostUser\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: us.comment\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"itemPostUserButton\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => editCommentHandler(us.id),\n            children: \"Edit Comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => onclickDeleteHandler(us.id) // Botón para eliminar el post\n            ,\n            className: \"deletePost\",\n            children: \"Delete Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }, this)]\n      }, us.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Cargando...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"itemPostUserButton\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClickNewPostHandler,\n        children: \"Create new Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClickBackHandler,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(GetPostsUser, \"fVlv8JbqNDN2LRdZnW45fH7ViZM=\", false, function () {\n  return [useParams, useNavigate, useDispatch, useSelector];\n});\n_c = GetPostsUser;\nexport default GetPostsUser;\nvar _c;\n$RefreshReg$(_c, \"GetPostsUser\");","map":{"version":3,"names":["axios","useDispatch","useSelector","useNavigate","useParams","refreshProfileUser","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","GetPostsUser","_s","userId","navigate","dispatch","user","state","profileUser","posts","setPosts","userDataFetched","setUserDataFetched","allPostsAdmin","allPosts","get","data","refreshProfile","error","console","getUserData","postId","response","User","fetchUserDataForPosts","userPromises","map","post","id","postsWithUsers","Promise","all","fetchUserDataIfNeeded","length","editCommentHandler","onClickNewPostHandler","onclickDeleteHandler","confirmDelete","window","confirm","delete","alert","prevPosts","filter","message","onClickBackHandler","className","children","fileName","_jsxFileName","lineNumber","columnNumber","admin","name","lastName","src","image","alt","comment","onClick","Posts","us","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/administracion proyect/client/client/src/components/Posts/GetPosts/GetPostsUser.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { refreshProfileUser } from \"../../../redux/actions\";\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./Posts.css\";\r\n\r\nconst GetPostsUser = () => {\r\n  const { userId } = useParams(); // Obtiene el userId de los parámetros de la URL\r\n  const navigate = useNavigate(); // Hook para la navegación\r\n  const dispatch = useDispatch(); // Hook para despachar acciones a Redux\r\n  const user = useSelector((state) => state.profileUser); // Obtiene los datos del perfil de usuario del estado global\r\n  const [posts, setPosts] = useState([]); // Estado para almacenar los posts del usuario\r\n  const [userDataFetched, setUserDataFetched] = useState(false); // Estado para verificar si los datos del usuario se han obtenido\r\n\r\n  // Función para obtener todos los posts de usuarios\r\n  const allPostsAdmin = async () => {\r\n    const allPosts = await axios.get(\"http://localhost:3001/postUser\"); // Solicitud para obtener todos los posts\r\n    setPosts(allPosts.data); // Actualiza el estado con los posts obtenidos\r\n  };\r\n\r\n  // Función para refrescar el perfil del usuario\r\n  const refreshProfile = async () => {\r\n    try {\r\n      await dispatch(refreshProfileUser(userId)); // Despacha la acción para refrescar el perfil\r\n    } catch (error) {\r\n      console.error(\"Error al recargar el perfil:\", error);\r\n    }\r\n  };\r\n\r\n  // Función para obtener los datos del usuario relacionado con un post específico\r\n  const getUserData = async (postId) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:3001/postUser/relationUser/${postId}` // Solicitud para obtener el usuario relacionado con el post\r\n      );\r\n      return response.data.User; // Devuelve los datos del usuario\r\n    } catch (error) {\r\n      console.error(`Error al obtener ${postId}:`, error.response.data);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Función para obtener los datos del usuario para cada post\r\n  const fetchUserDataForPosts = async () => {\r\n    const userPromises = posts.map(async (post) => {\r\n      // Mapea cada post para obtener el usuario relacionado\r\n      if (post.id) {\r\n        const user = await getUserData(post.id); // Obtiene los datos del usuario para el post\r\n        return { ...post, user }; // Devuelve el post con los datos del usuario\r\n      }\r\n      return post; // Devuelve el post si no tiene id\r\n    });\r\n\r\n    const postsWithUsers = await Promise.all(userPromises); // Espera a que todas las promesas se resuelvan\r\n    setPosts(postsWithUsers); // Actualiza el estado con los posts que incluyen los datos del usuario\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshProfile(); // Llama a la función para refrescar el perfil al montar el componente\r\n    allPostsAdmin(); // Llama a la función para obtener todos los posts\r\n  }, [userId]);\r\n\r\n  useEffect(() => {\r\n    const fetchUserDataIfNeeded = async () => {\r\n      // Verifica si los datos del usuario no se han obtenido y si hay posts\r\n      if (!userDataFetched && posts.length > 0) {\r\n        await fetchUserDataForPosts(); // Llama a la función para obtener los datos del usuario para los posts\r\n        setUserDataFetched(true); // Marca los datos como obtenidos\r\n      }\r\n    };\r\n\r\n    fetchUserDataIfNeeded(); // Llama a la función para obtener los datos si es necesario\r\n  }, [posts, userDataFetched]);\r\n\r\n  // Maneja el clic para editar un comentario\r\n  const editCommentHandler = async (postId) => {\r\n    navigate(`/editPosts/${userId}/${postId}`); // Redirige a la página de edición del post\r\n    await refreshProfile(); // Refresca el perfil del usuario\r\n  };\r\n\r\n  // Maneja el clic para crear un nuevo post\r\n  const onClickNewPostHandler = async () => {\r\n    navigate(`/createPost/${userId}`); // Redirige a la página para crear un nuevo post\r\n    await refreshProfile(); // Refresca el perfil del usuario\r\n  };\r\n\r\n  // Maneja el clic para eliminar un post\r\n  const onclickDeleteHandler = async (id) => {\r\n    const confirmDelete = window.confirm(\r\n      \"¿Estás seguro de que deseas eliminar este post?\"\r\n    );\r\n\r\n    if (confirmDelete) {\r\n      try {\r\n        await axios.delete(`http://localhost:3001/postUser/deletePost/${id}`); // Solicitud para eliminar el post\r\n        alert(\"Posteo eliminado correctamente\"); // Notificación de eliminación exitosa\r\n\r\n        // Actualiza el estado local para eliminar el post eliminado\r\n        setPosts((prevPosts) => prevPosts.filter((post) => post.id !== id)); // Filtra el post eliminado\r\n      } catch (error) {\r\n        alert(\"Error al eliminar el post: \" + error.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Maneja el clic para volver a la página de perfil de usuario\r\n  const onClickBackHandler = () => {\r\n    navigate(\"/userProfile\"); // Redirige a la página de perfil de usuario\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h3>Posts User</h3>\r\n      <div className=\"allPotsUser\">\r\n        {/* Contenedor para todos los posts de usuario */}\r\n        {user.admin === true ? ( // Verifica si el usuario es un administrador\r\n          posts.length > 0 ? ( // Verifica si hay posts disponibles\r\n            posts.map((post) => (\r\n              <div className=\"itemPostUser\" key={post.id}>\r\n                {/* Contenedor para cada post */}\r\n                <div>\r\n                  {post.user && ( // Verifica si hay datos del usuario relacionados con el post\r\n                    <>\r\n                      <div className=\"dataUserPost\">\r\n                        <p>\r\n                          <strong>User: </strong>\r\n                          {post.user.name} {post.user.lastName}{\" \"}\r\n                        </p>\r\n                        <img src={post.user.image} alt=\"User\" />{\" \"}\r\n                      </div>\r\n                      <h5>\r\n                        <strong>Comment: </strong>\r\n                        {post.comment}\r\n                      </h5>\r\n                    </>\r\n                  )}\r\n                </div>\r\n                <div className=\"itemPostUserButton\">\r\n                  {/* Botón para editar el comentario */}\r\n                  <button onClick={() => editCommentHandler(post.id)}>\r\n                    Edit Comment\r\n                  </button>\r\n                  <button\r\n                    onClick={() => onclickDeleteHandler(post.id)} // Botón para eliminar el post\r\n                    className=\"deletePost\"\r\n                  >\r\n                    Delete Post\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>No hay posts disponibles</p>\r\n          )\r\n        ) : user.Posts && user.Posts.length > 0 ? ( // Verifica si el usuario tiene posts\r\n          user.Posts.map((us) => (\r\n            <div className=\"itemPostUser\" key={us.id}>\r\n              <div>\r\n                <h4>{us.comment}</h4>\r\n              </div>\r\n              <div className=\"itemPostUserButton\">\r\n                {/* Botón para editar el comentario */}\r\n                <button onClick={() => editCommentHandler(us.id)}>\r\n                  Edit Comment\r\n                </button>\r\n                <button\r\n                  onClick={() => onclickDeleteHandler(us.id)} // Botón para eliminar el post\r\n                  className=\"deletePost\"\r\n                >\r\n                  Delete Post\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>Cargando...</p>\r\n        )}\r\n      </div>\r\n      <div className=\"itemPostUserButton\">\r\n        {/* Botón para crear un nuevo post */}\r\n        <button onClick={onClickNewPostHandler}>Create new Post</button>{\" \"}\r\n        {/* Botón para volver al perfil */}\r\n        <button onClick={onClickBackHandler}>Back</button>{\" \"}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GetPostsUser;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}