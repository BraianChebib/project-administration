{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\administracion proyect\\\\client\\\\client\\\\src\\\\views\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport { useDispatch } from \"react-redux\";\nimport CardsContainers from \"../components/Cardscontainer/CardsContainer\";\nimport { useEffect, useState } from \"react\";\nimport { getUsers, getNameUser } from \"../redux/actions\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [input, setInput] = useState(\"\");\n  const [debouncedInput, setDebouncedInput] = useState(input);\n\n  // Obtener todos los usuarios al cargar la página\n  useEffect(() => {\n    dispatch(getUsers());\n  }, [dispatch]);\n\n  // Debounce: Actualizar el valor del input con un retraso\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedInput(input);\n    }, 300); // 300ms de retraso\n\n    return () => {\n      clearTimeout(handler); // Limpiar el timeout anterior si el usuario sigue escribiendo\n    };\n  }, [input]);\n\n  // Efecto para despachar la búsqueda o todos los usuarios cuando el valor debounced cambie\n  useEffect(() => {\n    if (debouncedInput) {\n      dispatch(getNameUser(debouncedInput)); // Realizar búsqueda si hay input\n    } else {\n      dispatch(getUsers()); // Mostrar todos los usuarios si el input está vacío\n    }\n  }, [debouncedInput, dispatch]);\n\n  // Handler para actualizar el valor del input\n  const searchChange = event => {\n    setInput(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search By Name\",\n      value: input,\n      onChange: searchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardsContainers, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Home, \"jFwtC+QP62LDeQVOvsSSD9jcOsc=\", false, function () {\n  return [useDispatch];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useDispatch","CardsContainers","useEffect","useState","getUsers","getNameUser","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","dispatch","input","setInput","debouncedInput","setDebouncedInput","handler","setTimeout","clearTimeout","searchChange","event","target","value","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/administracion proyect/client/client/src/views/Home.jsx"],"sourcesContent":["import { useDispatch } from \"react-redux\";\r\nimport CardsContainers from \"../components/Cardscontainer/CardsContainer\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getUsers, getNameUser } from \"../redux/actions\";\r\n\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const [input, setInput] = useState(\"\");\r\n  const [debouncedInput, setDebouncedInput] = useState(input);\r\n\r\n  // Obtener todos los usuarios al cargar la página\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n  }, [dispatch]);\r\n\r\n  // Debounce: Actualizar el valor del input con un retraso\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedInput(input);\r\n    }, 300); // 300ms de retraso\r\n\r\n    return () => {\r\n      clearTimeout(handler); // Limpiar el timeout anterior si el usuario sigue escribiendo\r\n    };\r\n  }, [input]);\r\n\r\n  // Efecto para despachar la búsqueda o todos los usuarios cuando el valor debounced cambie\r\n  useEffect(() => {\r\n    if (debouncedInput) {\r\n      dispatch(getNameUser(debouncedInput)); // Realizar búsqueda si hay input\r\n    } else {\r\n      dispatch(getUsers()); // Mostrar todos los usuarios si el input está vacío\r\n    }\r\n  }, [debouncedInput, dispatch]);\r\n\r\n  // Handler para actualizar el valor del input\r\n  const searchChange = (event) => {\r\n    setInput(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search By Name\"\r\n        value={input}\r\n        onChange={searchChange}\r\n      />\r\n      <CardsContainers />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,OAAOC,eAAe,MAAM,6CAA6C;AACzE,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAACU,KAAK,CAAC;;EAE3D;EACAX,SAAS,CAAC,MAAM;IACdU,QAAQ,CAACR,QAAQ,CAAC,CAAC,CAAC;EACtB,CAAC,EAAE,CAACQ,QAAQ,CAAC,CAAC;;EAEd;EACAV,SAAS,CAAC,MAAM;IACd,MAAMe,OAAO,GAAGC,UAAU,CAAC,MAAM;MAC/BF,iBAAiB,CAACH,KAAK,CAAC;IAC1B,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;IAET,OAAO,MAAM;MACXM,YAAY,CAACF,OAAO,CAAC,CAAC,CAAC;IACzB,CAAC;EACH,CAAC,EAAE,CAACJ,KAAK,CAAC,CAAC;;EAEX;EACAX,SAAS,CAAC,MAAM;IACd,IAAIa,cAAc,EAAE;MAClBH,QAAQ,CAACP,WAAW,CAACU,cAAc,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC,MAAM;MACLH,QAAQ,CAACR,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IACxB;EACF,CAAC,EAAE,CAACW,cAAc,EAAEH,QAAQ,CAAC,CAAC;;EAE9B;EACA,MAAMQ,YAAY,GAAIC,KAAK,IAAK;IAC9BP,QAAQ,CAACO,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC9B,CAAC;EAED,oBACEhB,OAAA,CAAAE,SAAA;IAAAe,QAAA,gBACEjB,OAAA;MACEkB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,gBAAgB;MAC5BH,KAAK,EAAEV,KAAM;MACbc,QAAQ,EAAEP;IAAa;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eACFxB,OAAA,CAACN,eAAe;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACnB,CAAC;AAEP,CAAC;AAACpB,EAAA,CA9CID,IAAI;EAAA,QACSV,WAAW;AAAA;AAAAgC,EAAA,GADxBtB,IAAI;AAgDV,eAAeA,IAAI;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}