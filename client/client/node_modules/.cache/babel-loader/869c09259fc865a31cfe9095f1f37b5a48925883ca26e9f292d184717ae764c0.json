{"ast":null,"code":"import axios from \"axios\"; // Importa Axios para realizar solicitudes HTTP\n\n// Definición de constantes para las acciones de Redux\nexport const GET_USERS = \"GET_USERES\"; // Acción para obtener usuarios\nexport const GET_NAME_USER = \"GET_NAME_USER\"; // Acción para obtener un usuario por nombre\nexport const GET_USER_PROFILE = \"GET_USER_PROFILE\"; // Acción para obtener el perfil de un usuario\nexport const LOG_OUT = \"LOG_OUT\"; // Acción para cerrar sesión\nexport const GET_PROFILE_USER = \"GET_PROFILE_USER\"; // Acción para obtener el perfil del usuario\nexport const SET_LOADING = \"SET_LOADING\"; // Acción para establecer el estado de carga\n\n// Función para obtener todos los usuarios\nexport const getUsers = () => {\n  return async function (dispatch) {\n    const users = await axios.get(\"http://localhost:3001/users\"); // Solicita todos los usuarios desde el backend\n    const AllUsers = users.data; // Almacena los usuarios obtenidos\n    dispatch({\n      type: GET_USERS,\n      payload: AllUsers\n    }); // Despacha la acción con los usuarios\n  };\n};\n\n// Función para buscar un usuario por nombre\nexport const getNameUser = name => {\n  return async function (dispatch) {\n    dispatch({\n      type: SET_LOADING,\n      payload: true\n    }); // Establece el estado de carga a true\n\n    try {\n      // Realiza la solicitud para obtener el usuario por nombre\n      const nameUser = await axios.get(`http://localhost:3001/users?name=${name}`);\n      const nameUse = nameUser.data; // Almacena el usuario obtenido\n\n      // Despacha la acción con el usuario encontrado o un array vacío si no se encontró\n      if (nameUse.length > 0) {\n        dispatch({\n          type: GET_NAME_USER,\n          payload: nameUse\n        });\n      } else {\n        dispatch({\n          type: GET_NAME_USER,\n          payload: []\n        });\n      }\n    } catch (error) {\n      // Manejo de errores: despacha un array vacío en caso de error\n      dispatch({\n        type: GET_NAME_USER,\n        payload: []\n      });\n    } finally {\n      dispatch({\n        type: SET_LOADING,\n        payload: false\n      }); // Establece el estado de carga a false al finalizar\n    }\n  };\n};\n\n// Función para refrescar el perfil de un usuario específico\nexport const refreshProfileUser = userId => async dispatch => {\n  try {\n    const response = await axios.get(`http://localhost:3001/users/${userId}`); // Solicita los datos del usuario por ID\n    dispatch({\n      type: GET_PROFILE_USER,\n      // Despacha la acción para obtener el perfil del usuario\n      payload: response.data // Pasa los datos del perfil como payload\n    });\n  } catch (error) {\n    // Manejo de errores: muestra un mensaje en la consola\n    console.error(\"Error al obtener el perfil del usuario:\", error);\n  }\n};\n\n// Función para obtener el perfil de usuario al iniciar sesión\nexport const getUserProfile = login => {\n  return async function (dispatch) {\n    try {\n      const user = await axios.post(\"http://localhost:3001/users/userProfile\", login // Envía las credenciales para autenticar al usuario\n      );\n      const userProfile = user.data; // Almacena los datos del perfil del usuario\n\n      // Almacena el perfil del usuario en localStorage\n      localStorage.setItem(\"profileUser\", JSON.stringify(userProfile));\n      localStorage.setItem(\"isAuthenticated\", \"true\"); // Marca al usuario como autenticado\n\n      dispatch({\n        type: GET_USER_PROFILE,\n        payload: userProfile\n      }); // Despacha la acción con el perfil del usuario\n      return true; // Retorna verdadero si la operación es exitosa\n    } catch (error) {\n      var _error$response;\n      // Manejo de errores: muestra un mensaje de error y retorna falso\n      console.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      alert(\"Error: Perfil no existente, por favor ingrese nuevamente\");\n      return false;\n    }\n  };\n};\n\n// Función para cerrar sesión\nexport const logOut = () => {\n  return async function (dispatch) {\n    // Elimina el perfil del usuario y la autenticación del localStorage\n    localStorage.removeItem(\"profileUser\");\n    localStorage.removeItem(\"isAuthenticated\");\n    dispatch({\n      type: LOG_OUT,\n      payload: false\n    }); // Despacha la acción de cerrar sesión\n  };\n};","map":{"version":3,"names":["axios","GET_USERS","GET_NAME_USER","GET_USER_PROFILE","LOG_OUT","GET_PROFILE_USER","SET_LOADING","getUsers","dispatch","users","get","AllUsers","data","type","payload","getNameUser","name","nameUser","nameUse","length","error","refreshProfileUser","userId","response","console","getUserProfile","login","user","post","userProfile","localStorage","setItem","JSON","stringify","_error$response","message","alert","logOut","removeItem"],"sources":["C:/Users/USER/Documents/administracion proyect/client/client/src/redux/actions.js"],"sourcesContent":["import axios from \"axios\"; // Importa Axios para realizar solicitudes HTTP\r\n\r\n// Definición de constantes para las acciones de Redux\r\nexport const GET_USERS = \"GET_USERES\"; // Acción para obtener usuarios\r\nexport const GET_NAME_USER = \"GET_NAME_USER\"; // Acción para obtener un usuario por nombre\r\nexport const GET_USER_PROFILE = \"GET_USER_PROFILE\"; // Acción para obtener el perfil de un usuario\r\nexport const LOG_OUT = \"LOG_OUT\"; // Acción para cerrar sesión\r\nexport const GET_PROFILE_USER = \"GET_PROFILE_USER\"; // Acción para obtener el perfil del usuario\r\nexport const SET_LOADING = \"SET_LOADING\"; // Acción para establecer el estado de carga\r\n\r\n// Función para obtener todos los usuarios\r\nexport const getUsers = () => {\r\n  return async function (dispatch) {\r\n    const users = await axios.get(\"http://localhost:3001/users\"); // Solicita todos los usuarios desde el backend\r\n    const AllUsers = users.data; // Almacena los usuarios obtenidos\r\n    dispatch({ type: GET_USERS, payload: AllUsers }); // Despacha la acción con los usuarios\r\n  };\r\n};\r\n\r\n// Función para buscar un usuario por nombre\r\nexport const getNameUser = (name) => {\r\n  return async function (dispatch) {\r\n    dispatch({ type: SET_LOADING, payload: true }); // Establece el estado de carga a true\r\n\r\n    try {\r\n      // Realiza la solicitud para obtener el usuario por nombre\r\n      const nameUser = await axios.get(\r\n        `http://localhost:3001/users?name=${name}`\r\n      );\r\n      const nameUse = nameUser.data; // Almacena el usuario obtenido\r\n\r\n      // Despacha la acción con el usuario encontrado o un array vacío si no se encontró\r\n      if (nameUse.length > 0) {\r\n        dispatch({ type: GET_NAME_USER, payload: nameUse });\r\n      } else {\r\n        dispatch({ type: GET_NAME_USER, payload: [] });\r\n      }\r\n    } catch (error) {\r\n      // Manejo de errores: despacha un array vacío en caso de error\r\n      dispatch({ type: GET_NAME_USER, payload: [] });\r\n    } finally {\r\n      dispatch({ type: SET_LOADING, payload: false }); // Establece el estado de carga a false al finalizar\r\n    }\r\n  };\r\n};\r\n\r\n// Función para refrescar el perfil de un usuario específico\r\nexport const refreshProfileUser = (userId) => async (dispatch) => {\r\n  try {\r\n    const response = await axios.get(`http://localhost:3001/users/${userId}`); // Solicita los datos del usuario por ID\r\n    dispatch({\r\n      type: GET_PROFILE_USER, // Despacha la acción para obtener el perfil del usuario\r\n      payload: response.data, // Pasa los datos del perfil como payload\r\n    });\r\n  } catch (error) {\r\n    // Manejo de errores: muestra un mensaje en la consola\r\n    console.error(\"Error al obtener el perfil del usuario:\", error);\r\n  }\r\n};\r\n\r\n// Función para obtener el perfil de usuario al iniciar sesión\r\nexport const getUserProfile = (login) => {\r\n  return async function (dispatch) {\r\n    try {\r\n      const user = await axios.post(\r\n        \"http://localhost:3001/users/userProfile\",\r\n        login // Envía las credenciales para autenticar al usuario\r\n      );\r\n      const userProfile = user.data; // Almacena los datos del perfil del usuario\r\n\r\n      // Almacena el perfil del usuario en localStorage\r\n      localStorage.setItem(\"profileUser\", JSON.stringify(userProfile));\r\n      localStorage.setItem(\"isAuthenticated\", \"true\"); // Marca al usuario como autenticado\r\n\r\n      dispatch({ type: GET_USER_PROFILE, payload: userProfile }); // Despacha la acción con el perfil del usuario\r\n      return true; // Retorna verdadero si la operación es exitosa\r\n    } catch (error) {\r\n      // Manejo de errores: muestra un mensaje de error y retorna falso\r\n      console.error(error.response?.data || error.message);\r\n      alert(\"Error: Perfil no existente, por favor ingrese nuevamente\");\r\n      return false;\r\n    }\r\n  };\r\n};\r\n\r\n// Función para cerrar sesión\r\nexport const logOut = () => {\r\n  return async function (dispatch) {\r\n    // Elimina el perfil del usuario y la autenticación del localStorage\r\n    localStorage.removeItem(\"profileUser\");\r\n    localStorage.removeItem(\"isAuthenticated\");\r\n    dispatch({ type: LOG_OUT, payload: false }); // Despacha la acción de cerrar sesión\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}