{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\administracion proyect\\\\client\\\\client\\\\src\\\\components\\\\Posts\\\\GetPosts.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GetPosts = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const navigate = useNavigate();\n  const {\n    userId\n  } = useParams();\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = await axios.get(`http://localhost:3001/users/${userId}/posts`);\n        setPosts(response.data);\n      } catch (error) {\n        alert(error);\n      }\n    };\n    fetchPosts();\n  }, [userId]);\n  const editCommentHandler = postId => {\n    navigate(`/editPosts/${userId}/${postId}`);\n  };\n  const onClickNewPostHandler = () => {\n    navigate(`/createPost/${userId}`);\n  };\n  const onclickDeleteHandler = async id => {\n    try {\n      await axios.delete(`http://localhost:3001/postUser/deletePost/${id}`);\n      alert(\"Posteo eliminado correctamente\");\n\n      // Filtra los posts eliminados\n      setPosts(posts.filter(post => post.id !== id));\n    } catch (error) {\n      alert(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [posts.length > 0 ? posts.map(post => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: post.comment\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => editCommentHandler(post.id),\n            children: \"Edit Comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => onclickDeleteHandler(post.id),\n            children: \"Delete Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this)]\n        }, post.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Cargando...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClickNewPostHandler,\n        children: \"Crear un nuevo Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(GetPosts, \"0aTO1FGBWPqVKOhbGffwQa+hKTw=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = GetPosts;\nexport default GetPosts;\nvar _c;\n$RefreshReg$(_c, \"GetPosts\");","map":{"version":3,"names":["useState","useEffect","axios","useNavigate","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","GetPosts","_s","posts","setPosts","navigate","userId","fetchPosts","response","get","data","error","alert","editCommentHandler","postId","onClickNewPostHandler","onclickDeleteHandler","id","delete","filter","post","children","length","map","comment","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/administracion proyect/client/client/src/components/Posts/GetPosts.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nconst GetPosts = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const navigate = useNavigate();\r\n  const { userId } = useParams();\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:3001/users/${userId}/posts`\r\n        );\r\n        setPosts(response.data);\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    };\r\n    fetchPosts();\r\n  }, [userId]);\r\n\r\n  const editCommentHandler = (postId) => {\r\n    navigate(`/editPosts/${userId}/${postId}`);\r\n  };\r\n\r\n  const onClickNewPostHandler = () => {\r\n    navigate(`/createPost/${userId}`);\r\n  };\r\n\r\n  const onclickDeleteHandler = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:3001/postUser/deletePost/${id}`);\r\n      alert(\"Posteo eliminado correctamente\");\r\n\r\n      // Filtra los posts eliminados\r\n      setPosts(posts.filter((post) => post.id !== id));\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <li>\r\n        {posts.length > 0 ? (\r\n          posts.map((post) => {\r\n            return (\r\n              <li key={post.id}>\r\n                <h1>{post.comment}</h1>\r\n                <button onClick={() => editCommentHandler(post.id)}>\r\n                  Edit Comment\r\n                </button>\r\n                <button onClick={() => onclickDeleteHandler(post.id)}>\r\n                  Delete Post\r\n                </button>\r\n              </li>\r\n            );\r\n          })\r\n        ) : (\r\n          <p>Cargando...</p>\r\n        )}\r\n        <button onClick={onClickNewPostHandler}>Crear un nuevo Post</button>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GetPosts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}