{"ast":null,"code":"import axios from \"axios\";\n\n// Constantes para los tipos de acciones\nexport const GET_USERS = \"GET_USERS\";\nexport const GET_NAME_USER = \"GET_NAME_USER\";\nexport const GET_USER_PROFILE = \"GET_USER_PROFILE\";\nexport const LOG_OUT = \"LOG_OUT\";\nexport const GET_PROFILE_USER = \"GET_PROFILE_USER\";\nexport const SET_LOADING = \"SET_LOADING\";\n\n// URL base de la API\nconst API_URL = \"http://localhost:3001/users\";\n\n/**\r\n * Acción para obtener todos los usuarios\r\n */\nexport const getUsers = () => {\n  return async function (dispatch) {\n    try {\n      const {\n        data: AllUsers\n      } = await axios.get(API_URL);\n      dispatch({\n        type: GET_USERS,\n        payload: AllUsers\n      });\n    } catch (error) {\n      console.error(\"Error al obtener los usuarios:\", error);\n      // Puedes dispatch un error si es necesario\n    }\n  };\n};\n\n/**\r\n * Acción para buscar usuarios por nombre\r\n * @param {string} name - El nombre del usuario a buscar\r\n */\nexport const getNameUser = name => {\n  return async function (dispatch) {\n    dispatch({\n      type: SET_LOADING,\n      payload: true\n    });\n    try {\n      const {\n        data: nameUse\n      } = await axios.get(`${API_URL}?name=${name}`);\n      dispatch({\n        type: GET_NAME_USER,\n        payload: nameUse.length > 0 ? nameUse : []\n      });\n    } catch (error) {\n      console.error(\"Error al buscar el usuario:\", error);\n      dispatch({\n        type: GET_NAME_USER,\n        payload: []\n      });\n    } finally {\n      dispatch({\n        type: SET_LOADING,\n        payload: false\n      });\n    }\n  };\n};\n\n/**\r\n * Acción para refrescar el perfil del usuario\r\n * @param {string} userId - ID del usuario cuyo perfil se va a obtener\r\n */\nexport const refreshProfileUser = userId => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.get(`${API_URL}/${userId}`);\n    dispatch({\n      type: GET_PROFILE_USER,\n      payload: data\n    });\n  } catch (error) {\n    console.error(\"Error al obtener el perfil del usuario:\", error);\n  }\n};\n\n/**\r\n * Acción para obtener el perfil del usuario durante el inicio de sesión\r\n * @param {object} login - Datos de inicio de sesión\r\n */\nexport const getUserProfile = login => {\n  return async function (dispatch) {\n    try {\n      const {\n        data: userProfile\n      } = await axios.post(`${API_URL}/userProfile`, login);\n\n      // Almacenar en localStorage para la persistencia\n      localStorage.setItem(\"profileUser\", JSON.stringify(userProfile));\n      localStorage.setItem(\"isAuthenticated\", \"true\");\n      dispatch({\n        type: GET_USER_PROFILE,\n        payload: userProfile\n      });\n      return true; // Indica que la acción fue exitosa\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error al obtener el perfil:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      alert(\"Error: Perfil no existente, por favor ingrese nuevamente\");\n      return false; // Indica que la acción falló\n    }\n  };\n};\n\n/**\r\n * Acción para cerrar sesión\r\n */\nexport const logOut = () => {\n  return async function (dispatch) {\n    localStorage.removeItem(\"profileUser\");\n    localStorage.removeItem(\"isAuthenticated\");\n    dispatch({\n      type: LOG_OUT,\n      payload: false\n    });\n  };\n};","map":{"version":3,"names":["axios","GET_USERS","GET_NAME_USER","GET_USER_PROFILE","LOG_OUT","GET_PROFILE_USER","SET_LOADING","API_URL","getUsers","dispatch","data","AllUsers","get","type","payload","error","console","getNameUser","name","nameUse","length","refreshProfileUser","userId","getUserProfile","login","userProfile","post","localStorage","setItem","JSON","stringify","_error$response","response","message","alert","logOut","removeItem"],"sources":["C:/Users/USER/Documents/administracion proyect/client/client/src/redux/actions.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Constantes para los tipos de acciones\r\nexport const GET_USERS = \"GET_USERS\";\r\nexport const GET_NAME_USER = \"GET_NAME_USER\";\r\nexport const GET_USER_PROFILE = \"GET_USER_PROFILE\";\r\nexport const LOG_OUT = \"LOG_OUT\";\r\nexport const GET_PROFILE_USER = \"GET_PROFILE_USER\";\r\nexport const SET_LOADING = \"SET_LOADING\";\r\n\r\n// URL base de la API\r\nconst API_URL = \"http://localhost:3001/users\";\r\n\r\n/**\r\n * Acción para obtener todos los usuarios\r\n */\r\nexport const getUsers = () => {\r\n  return async function (dispatch) {\r\n    try {\r\n      const { data: AllUsers } = await axios.get(API_URL);\r\n      dispatch({ type: GET_USERS, payload: AllUsers });\r\n    } catch (error) {\r\n      console.error(\"Error al obtener los usuarios:\", error);\r\n      // Puedes dispatch un error si es necesario\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Acción para buscar usuarios por nombre\r\n * @param {string} name - El nombre del usuario a buscar\r\n */\r\nexport const getNameUser = (name) => {\r\n  return async function (dispatch) {\r\n    dispatch({ type: SET_LOADING, payload: true });\r\n\r\n    try {\r\n      const { data: nameUse } = await axios.get(`${API_URL}?name=${name}`);\r\n      dispatch({\r\n        type: GET_NAME_USER,\r\n        payload: nameUse.length > 0 ? nameUse : [],\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error al buscar el usuario:\", error);\r\n      dispatch({ type: GET_NAME_USER, payload: [] });\r\n    } finally {\r\n      dispatch({ type: SET_LOADING, payload: false });\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Acción para refrescar el perfil del usuario\r\n * @param {string} userId - ID del usuario cuyo perfil se va a obtener\r\n */\r\nexport const refreshProfileUser = (userId) => async (dispatch) => {\r\n  try {\r\n    const { data } = await axios.get(`${API_URL}/${userId}`);\r\n    dispatch({\r\n      type: GET_PROFILE_USER,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error al obtener el perfil del usuario:\", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Acción para obtener el perfil del usuario durante el inicio de sesión\r\n * @param {object} login - Datos de inicio de sesión\r\n */\r\nexport const getUserProfile = (login) => {\r\n  return async function (dispatch) {\r\n    try {\r\n      const { data: userProfile } = await axios.post(\r\n        `${API_URL}/userProfile`,\r\n        login\r\n      );\r\n\r\n      // Almacenar en localStorage para la persistencia\r\n      localStorage.setItem(\"profileUser\", JSON.stringify(userProfile));\r\n      localStorage.setItem(\"isAuthenticated\", \"true\");\r\n\r\n      dispatch({ type: GET_USER_PROFILE, payload: userProfile });\r\n      return true; // Indica que la acción fue exitosa\r\n    } catch (error) {\r\n      console.error(\r\n        \"Error al obtener el perfil:\",\r\n        error.response?.data || error.message\r\n      );\r\n      alert(\"Error: Perfil no existente, por favor ingrese nuevamente\");\r\n      return false; // Indica que la acción falló\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Acción para cerrar sesión\r\n */\r\nexport const logOut = () => {\r\n  return async function (dispatch) {\r\n    localStorage.removeItem(\"profileUser\");\r\n    localStorage.removeItem(\"isAuthenticated\");\r\n    dispatch({ type: LOG_OUT, payload: false });\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}