{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\administracion proyect\\\\client\\\\client\\\\src\\\\components\\\\Cardscontainer\\\\CardsContainer.jsx\",\n  _s = $RefreshSig$();\nimport Cards from \"../Cards/Cards\";\nimport { useSelector } from \"react-redux\";\nimport \"./CardsContainer.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardsContainers = () => {\n  _s();\n  // Obtenemos la lista de usuarios desde el estado de Redux\n  const users = useSelector(state => state.users);\n\n  // Estado local para guardar los detalles de cada usuario\n  const [userDetails, setUserDetails] = useState({});\n\n  // Efecto para cargar los detalles de los usuarios al montarse el componente o cuando cambian los usuarios\n  useEffect(() => {\n    const fetchUserDetails = async () => {\n      try {\n        // Filtramos usuarios que ya tienen detalles cargados para evitar solicitudes duplicadas\n        const userPromises = users.filter(user => user.id && !userDetails[user.id]) // Solo usuarios que no tienen detalles cargados\n        .map(user => axios.get(`http://localhost:3001/users/${user.id}`));\n\n        // Esperamos a que todas las solicitudes se completen\n        const responses = await Promise.all(userPromises);\n\n        // Creamos un mapa de detalles de usuarios basado en las respuestas\n        const userDetailsMap = responses.reduce((acc, res) => {\n          acc[res.data.id] = res.data;\n          return acc;\n        }, {});\n\n        // Actualizamos el estado con los detalles obtenidos, manteniendo los que ya existen\n        setUserDetails(prevDetails => ({\n          ...prevDetails,\n          ...userDetailsMap\n        }));\n      } catch (error) {\n        console.error(\"Error fetching user details:\", error);\n      }\n    };\n    if (users.length > 0) {\n      fetchUserDetails();\n    }\n  }, [users, userDetails]); // Se vuelve a ejecutar si cambian los usuarios o los detalles\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainContainer\",\n    children: users.map(user => {\n      const details = userDetails[user.id]; // Detalles del usuario obtenidos\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: details && !user.admin && /*#__PURE__*/_jsxDEV(Cards, {\n          id: details.id,\n          name: details.name,\n          lastName: details.lastName,\n          image: details.image,\n          email: details.email,\n          phone: details.phone,\n          Posts: details.Posts || [] // Posts del usuario, si existen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this)\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(CardsContainers, \"6dtjAM8zc1hJofP6oQc4ddwQ7ZM=\", false, function () {\n  return [useSelector];\n});\n_c = CardsContainers;\nexport default CardsContainers;\nvar _c;\n$RefreshReg$(_c, \"CardsContainers\");","map":{"version":3,"names":["Cards","useSelector","useEffect","useState","axios","jsxDEV","_jsxDEV","CardsContainers","_s","users","state","userDetails","setUserDetails","fetchUserDetails","userPromises","filter","user","id","map","get","responses","Promise","all","userDetailsMap","reduce","acc","res","data","prevDetails","error","console","length","className","children","details","admin","name","lastName","image","email","phone","Posts","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/administracion proyect/client/client/src/components/Cardscontainer/CardsContainer.jsx"],"sourcesContent":["import Cards from \"../Cards/Cards\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./CardsContainer.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst CardsContainers = () => {\r\n  // Obtenemos la lista de usuarios desde el estado de Redux\r\n  const users = useSelector((state) => state.users);\r\n\r\n  // Estado local para guardar los detalles de cada usuario\r\n  const [userDetails, setUserDetails] = useState({});\r\n\r\n  // Efecto para cargar los detalles de los usuarios al montarse el componente o cuando cambian los usuarios\r\n  useEffect(() => {\r\n    const fetchUserDetails = async () => {\r\n      try {\r\n        // Filtramos usuarios que ya tienen detalles cargados para evitar solicitudes duplicadas\r\n        const userPromises = users\r\n          .filter((user) => user.id && !userDetails[user.id]) // Solo usuarios que no tienen detalles cargados\r\n          .map((user) => axios.get(`http://localhost:3001/users/${user.id}`));\r\n\r\n        // Esperamos a que todas las solicitudes se completen\r\n        const responses = await Promise.all(userPromises);\r\n\r\n        // Creamos un mapa de detalles de usuarios basado en las respuestas\r\n        const userDetailsMap = responses.reduce((acc, res) => {\r\n          acc[res.data.id] = res.data;\r\n          return acc;\r\n        }, {});\r\n\r\n        // Actualizamos el estado con los detalles obtenidos, manteniendo los que ya existen\r\n        setUserDetails((prevDetails) => ({\r\n          ...prevDetails,\r\n          ...userDetailsMap,\r\n        }));\r\n      } catch (error) {\r\n        console.error(\"Error fetching user details:\", error);\r\n      }\r\n    };\r\n\r\n    if (users.length > 0) {\r\n      fetchUserDetails();\r\n    }\r\n  }, [users, userDetails]); // Se vuelve a ejecutar si cambian los usuarios o los detalles\r\n\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      {users.map((user) => {\r\n        const details = userDetails[user.id]; // Detalles del usuario obtenidos\r\n        return (\r\n          <div className=\"cards\" key={user.id}>\r\n            {/* Verificamos que los detalles existan y que el usuario no sea administrador */}\r\n            {details && !user.admin && (\r\n              <Cards\r\n                id={details.id}\r\n                name={details.name}\r\n                lastName={details.lastName}\r\n                image={details.image}\r\n                email={details.email}\r\n                phone={details.phone}\r\n                Posts={details.Posts || []} // Posts del usuario, si existen\r\n              />\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardsContainers;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}