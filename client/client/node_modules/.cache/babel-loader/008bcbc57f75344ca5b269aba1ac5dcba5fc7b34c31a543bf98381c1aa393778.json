{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\administracion proyect\\\\client\\\\client\\\\src\\\\components\\\\Posts\\\\EditPost\\\\EditPost.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport \"./EditPost.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditPost = () => {\n  _s();\n  const {\n    userId,\n    postId\n  } = useParams(); // Obtener userId y postId de los parámetros de la URL\n  const [input, setInput] = useState({\n    id: postId,\n    comment: \"\"\n  }); // Estado para manejar los datos del post\n  const navigate = useNavigate(); // Hook para la navegación entre rutas\n\n  // Obtener los datos del post cuando el componente se monta\n  useEffect(() => {\n    const getPost = async () => {\n      try {\n        const response = await axios.get(`http://localhost:3001/postUser/${postId}`); // Solicitud GET para obtener el post\n        setInput({\n          id: postId,\n          comment: response.data.comment\n        }); // Actualiza el estado con el comentario actual del post\n      } catch (error) {\n        console.error(\"Error al obtener el post:\", error); // Manejo de errores en la consola\n        alert(\"Error al obtener el post. Por favor, inténtalo de nuevo.\"); // Alerta al usuario en caso de error\n      }\n    };\n    getPost();\n  }, [postId]); // Ejecutar useEffect solo cuando postId cambie\n\n  // Manejar cambios en el input del comentario\n  const onChangeInputHandler = e => {\n    const postComment = e.target.value; // Capturar el nuevo comentario\n    setInput(prevState => ({\n      ...prevState,\n      comment: postComment\n    })); // Actualizar el estado\n  };\n\n  // Manejar el envío del formulario\n  const onSubmitHandler = async e => {\n    e.preventDefault(); // Prevenir el comportamiento por defecto del formulario\n    try {\n      // Realizar la petición PUT para actualizar el post\n      await axios.put(`http://localhost:3001/postUser/modifyPost`, input);\n      navigate(`/posts/${userId}`); // Redirigir al usuario a la lista de posts\n    } catch (error) {\n      console.error(\"Error al modificar el post:\", error); // Manejo de errores en la consola\n      alert(\"Error al modificar el post. Por favor, inténtalo de nuevo.\"); // Alerta al usuario en caso de error\n    }\n  };\n\n  // Manejar el clic en el botón de retroceso\n  const onclickHandler = () => {\n    navigate(`/posts/${userId}`); // Navegar de vuelta a la lista de posts\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editPostsContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onSubmitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Modificar comentario del post:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input.comment // Usar el estado input para el valor del input\n          ,\n          onChange: onChangeInputHandler // Cambiar el comentario al modificar el input\n          ,\n          required: true // Asegurar que el campo no esté vacío\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Enviar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"backButtonContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onclickHandler,\n          className: \"backButton\",\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(EditPost, \"iz2QcEahkPT4VURpoAin0uRpdjU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditPost;\nexport default EditPost;\nvar _c;\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"names":["axios","useState","useEffect","useNavigate","useParams","jsxDEV","_jsxDEV","EditPost","_s","userId","postId","input","setInput","id","comment","navigate","getPost","response","get","data","error","console","alert","onChangeInputHandler","e","postComment","target","value","prevState","onSubmitHandler","preventDefault","put","onclickHandler","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","required","onClick","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/administracion proyect/client/client/src/components/Posts/EditPost/EditPost.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport \"./EditPost.css\";\r\n\r\nconst EditPost = () => {\r\n  const { userId, postId } = useParams(); // Obtener userId y postId de los parámetros de la URL\r\n  const [input, setInput] = useState({ id: postId, comment: \"\" }); // Estado para manejar los datos del post\r\n  const navigate = useNavigate(); // Hook para la navegación entre rutas\r\n\r\n  // Obtener los datos del post cuando el componente se monta\r\n  useEffect(() => {\r\n    const getPost = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:3001/postUser/${postId}`\r\n        ); // Solicitud GET para obtener el post\r\n        setInput({ id: postId, comment: response.data.comment }); // Actualiza el estado con el comentario actual del post\r\n      } catch (error) {\r\n        console.error(\"Error al obtener el post:\", error); // Manejo de errores en la consola\r\n        alert(\"Error al obtener el post. Por favor, inténtalo de nuevo.\"); // Alerta al usuario en caso de error\r\n      }\r\n    };\r\n    getPost();\r\n  }, [postId]); // Ejecutar useEffect solo cuando postId cambie\r\n\r\n  // Manejar cambios en el input del comentario\r\n  const onChangeInputHandler = (e) => {\r\n    const postComment = e.target.value; // Capturar el nuevo comentario\r\n    setInput((prevState) => ({ ...prevState, comment: postComment })); // Actualizar el estado\r\n  };\r\n\r\n  // Manejar el envío del formulario\r\n  const onSubmitHandler = async (e) => {\r\n    e.preventDefault(); // Prevenir el comportamiento por defecto del formulario\r\n    try {\r\n      // Realizar la petición PUT para actualizar el post\r\n      await axios.put(`http://localhost:3001/postUser/modifyPost`, input);\r\n      navigate(`/posts/${userId}`); // Redirigir al usuario a la lista de posts\r\n    } catch (error) {\r\n      console.error(\"Error al modificar el post:\", error); // Manejo de errores en la consola\r\n      alert(\"Error al modificar el post. Por favor, inténtalo de nuevo.\"); // Alerta al usuario en caso de error\r\n    }\r\n  };\r\n\r\n  // Manejar el clic en el botón de retroceso\r\n  const onclickHandler = () => {\r\n    navigate(`/posts/${userId}`); // Navegar de vuelta a la lista de posts\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"editPostsContainer\">\r\n        <form onSubmit={onSubmitHandler}>\r\n          <h3>Modificar comentario del post:</h3>\r\n          <input\r\n            type=\"text\"\r\n            value={input.comment} // Usar el estado input para el valor del input\r\n            onChange={onChangeInputHandler} // Cambiar el comentario al modificar el input\r\n            required // Asegurar que el campo no esté vacío\r\n          />\r\n          <button type=\"submit\">Enviar</button>{\" \"}\r\n          {/* Botón para enviar el formulario */}\r\n        </form>\r\n        <div className=\"backButtonContainer\">\r\n          <button onClick={onclickHandler} className=\"backButton\">\r\n            Back\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditPost;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}