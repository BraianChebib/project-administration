{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\administracion proyect\\\\client\\\\client\\\\src\\\\components\\\\Cardscontainer\\\\CardsContainer.jsx\",\n  _s = $RefreshSig$();\nimport Cards from \"../Cards/Cards\";\nimport { useSelector } from \"react-redux\";\nimport \"./CardsContainer.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardsContainers = () => {\n  _s();\n  const users = useSelector(state => state.users); // Obtiene la lista de usuarios desde el estado de Redux\n  const [userDetails, setUserDetails] = useState({}); // Estado para guardar los detalles de cada usuario\n\n  useEffect(() => {\n    const fetchUserDetails = async () => {\n      try {\n        // Solo hacer la solicitud si el usuario tiene una id válida y existe en la lista\n        const userPromises = users.filter(user => user.id) // Filtra los usuarios para asegurarse de que tengan id\n        .map(user => axios.get(`http://localhost:3001/users/${user.id}`)); // Crea una lista de promesas para obtener detalles del usuario\n\n        const responses = await Promise.all(userPromises); // Espera a que se resuelvan todas las promesas\n        const userDetailsMap = responses.reduce((acc, res, idx) => {\n          acc[users[idx].id] = res.data; // Mapea las respuestas a un objeto usando el id del usuario\n          return acc;\n        }, {});\n        setUserDetails(userDetailsMap); // Actualiza el estado con los detalles de los usuarios\n      } catch (error) {\n        console.error(\"Error fetching user details:\", error);\n      }\n    };\n    if (users.length > 0) {\n      fetchUserDetails(); // Llama a la función para obtener detalles de los usuarios si hay usuarios en el estado\n    }\n  }, [users]); // useEffect que se ejecuta cuando cambia la lista de usuarios\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainContainer\",\n    children: users.map(user => {\n      const details = userDetails[user.id]; // Obtiene los detalles del usuario correspondientes\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: [\" \", details && !user.admin &&\n        /*#__PURE__*/\n        // Verifica que los detalles existan y que el usuario no sea un administrador\n        _jsxDEV(Cards, {\n          id: details.id,\n          name: details.name,\n          lastName: details.lastName,\n          image: details.image,\n          email: details.email,\n          phone: details.phone,\n          Posts: details.Posts || [] // Proporciona la lista de publicaciones, si existen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this)]\n      }, user.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(CardsContainers, \"6dtjAM8zc1hJofP6oQc4ddwQ7ZM=\", false, function () {\n  return [useSelector];\n});\n_c = CardsContainers;\nexport default CardsContainers; // Exporta el componente CardsContainers para su uso en otros archivos\nvar _c;\n$RefreshReg$(_c, \"CardsContainers\");","map":{"version":3,"names":["Cards","useSelector","useEffect","useState","axios","jsxDEV","_jsxDEV","CardsContainers","_s","users","state","userDetails","setUserDetails","fetchUserDetails","userPromises","filter","user","id","map","get","responses","Promise","all","userDetailsMap","reduce","acc","res","idx","data","error","console","length","className","children","details","admin","name","lastName","image","email","phone","Posts","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/administracion proyect/client/client/src/components/Cardscontainer/CardsContainer.jsx"],"sourcesContent":["import Cards from \"../Cards/Cards\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./CardsContainer.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst CardsContainers = () => {\r\n  const users = useSelector((state) => state.users); // Obtiene la lista de usuarios desde el estado de Redux\r\n  const [userDetails, setUserDetails] = useState({}); // Estado para guardar los detalles de cada usuario\r\n\r\n  useEffect(() => {\r\n    const fetchUserDetails = async () => {\r\n      try {\r\n        // Solo hacer la solicitud si el usuario tiene una id válida y existe en la lista\r\n        const userPromises = users\r\n          .filter((user) => user.id) // Filtra los usuarios para asegurarse de que tengan id\r\n          .map((user) => axios.get(`http://localhost:3001/users/${user.id}`)); // Crea una lista de promesas para obtener detalles del usuario\r\n\r\n        const responses = await Promise.all(userPromises); // Espera a que se resuelvan todas las promesas\r\n        const userDetailsMap = responses.reduce((acc, res, idx) => {\r\n          acc[users[idx].id] = res.data; // Mapea las respuestas a un objeto usando el id del usuario\r\n          return acc;\r\n        }, {});\r\n        setUserDetails(userDetailsMap); // Actualiza el estado con los detalles de los usuarios\r\n      } catch (error) {\r\n        console.error(\"Error fetching user details:\", error);\r\n      }\r\n    };\r\n\r\n    if (users.length > 0) {\r\n      fetchUserDetails(); // Llama a la función para obtener detalles de los usuarios si hay usuarios en el estado\r\n    }\r\n  }, [users]); // useEffect que se ejecuta cuando cambia la lista de usuarios\r\n\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      {users.map((user) => {\r\n        const details = userDetails[user.id]; // Obtiene los detalles del usuario correspondientes\r\n        return (\r\n          <div className=\"cards\" key={user.id}>\r\n            {\" \"}\r\n            {/* Asegúrate de que cada tarjeta tenga una clave única */}\r\n            {details &&\r\n              !user.admin && ( // Verifica que los detalles existan y que el usuario no sea un administrador\r\n                <Cards\r\n                  id={details.id}\r\n                  name={details.name}\r\n                  lastName={details.lastName}\r\n                  image={details.image}\r\n                  email={details.email}\r\n                  phone={details.phone}\r\n                  Posts={details.Posts || []} // Proporciona la lista de publicaciones, si existen\r\n                />\r\n              )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardsContainers; // Exporta el componente CardsContainers para su uso en otros archivos\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}